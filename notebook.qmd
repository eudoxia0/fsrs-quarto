---
title: "FSRS"
format:
  html:
    code-fold: false
jupyter: python3
---

Retrievability $R$ is a real number in $[0, 1]$.

```{python}
R = float
```

Stability $S$ is a real number $[0, +\infty]$.

```{python}
S = float
```

Difficulty $D$ is a real number $[0, 10]$.

```{python}
D = float
```

Grade $G$ is one of:

- Forgot = 1
- Hard = 2
- Good = 3
- Easy = 4

```{python}
from enum import Enum

class Grade(Enum):
    FORGOT = 1
    HARD   = 2
    GOOD   = 3
    EASY   = 4
```

$w$ is a vector in $\mathbb{R}^{19}$.

```{python}
W: list[float] = [
    0.40255,
    1.18385,
    3.173,
    15.69105,
    7.1949,
    0.5345,
    1.4604,
    0.0046,
    1.54575,
    0.1192,
    1.01925,
    1.9395,
    0.11,
    0.29605,
    2.2698,
    0.2315,
    2.9898,
    0.51655,
    0.6621
]
```

Retrievability is approximated by:

$$
R(t) = \left( 1 + F\frac{t}{S} \right)^C
$$

Where $t$ is time in days since the last review, and:

$$
\begin{align*}
F &= \frac{19}{81} \\
C &= -0.5
\end{align*}
$$

```{python}
T = float

F: float = 19.0/81.0
C: float = -0.5

def retrievability(t: T, s: S) -> R:
    return (1.0 + F*(t/s))**C
```

The review interval is:

$$
I = \frac{S}{F} \left( R_d^{(1/C)} - 1 \right)
$$

Where $R_d$ is the desired retention.

```{python}
def interval(rd: float, s: S) -> T:
    return (s/F)*(rd**(1.0/C) - 1.0)
```
